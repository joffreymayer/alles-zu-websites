[["index.html", "My Knowledge Database for Websites Chapter 1 Set-Up 1.1 Backend: Git &amp; Github 1.2 Create a Bookdown-Website", " My Knowledge Database for Websites Joffrey Anthony 2022-01-06 Chapter 1 Set-Up 1.1 Backend: Git &amp; Github Create a Github-Account. We also need to download Git, a Version-Control System, because you can track all your changes and it is easier to collaborate on Code-Projects. Next, we need to link our Github-Account to Git. To do this, use the Terminal and type in the following two commands: 3.1) git config --global user.name \"YOUR GIBHUB USERNAME HERE\" 3.2) git config --global user.email \"your_github_email@example.com\" Create a Public &amp; Private SSH-Key in order to not always type in your password. Follow the instruction of this Youtube-Tutorial (ab 2:40-4:03). In order to be able to use the SSH-Key, you need to follow my instruction in the Video on my local computer, situated on the following path: /Users/jomaye/Nextcloud/Dokumente/Life/Video Tutorials/Github/ssh-key-zum-laufen-bringen.mov. If the Git code that I provided in the video does not work, then I recommend you to also try this code out: git remote set-url --add --push origin git@github.com:yourGithubUsername/yourRepo.git 1.2 Create a Bookdown-Website Use this Bookdown-Template to create an awesome website like this one, you are currently at right now. Follow all the instruction of this 5 Minutes Youtube-Video. "],["seo.html", "Chapter 2 SEO 2.1 Outline 2.2 PDFs", " Chapter 2 SEO Für die Webseiten-Indexierung innerhalb der Google-Suchmaschine ist es von grösster Bedeutung, dass du die Kunst des Seo (Search Engine Optimization) beherrschts. 2.1 Outline Das Wichtigste, damit deine Webseite auf dem Internet effizient in der Google-Suche gefunden wird - idealerweise auf #1 - ist eine “korrekte” HTML-Struktur (= Outline) zu haben. Seite, um dein aktuelles Outline zu checken: https://gsnedders.html5.org/outliner/ Beispiel, für ein korrektes Outline für das Keyword Accuphase und der URL https://audiophil-dreams.com/accuphase.html 2.1.1 Wenn dein Outline “falsch” ist Falls du nicht zufrieden bist mit deinem aktuellen Outline, dann empfehle ich dir die folgende Methode: https://www.youtube.com/watch?v=QDq-KVE5ZSA 2.2 PDFs Ein PDF wird von Google grundsätzlich automatisch in die Suchmaschine aufgenommen. Oftmals verwendest du PDFs jedoch als Ergänzungen zu den Type in the following into you .htaccess-File, for Appache-Servers: &lt;Files ~ &quot;\\.pdf$&quot;&gt; Header set X-Robots-Tag &quot;noindex, nofollow&quot; &lt;/Files&gt; If you have NGINX, you need this code instead: location ~* \\.pdf$ { add_header X-Robots-Tag &quot;noindex, nofollow&quot;; } To check if it worked, you need to view the HTTP Header of your PDF. You can do this via the developer tools in the Google Chrome Browser (by hitting F12). Developer-Tools For a more precise explanation, I recommend this site. This is the output you should see being printed If the solution above does not work, I have found an alternative way: &lt;FilesMatch &quot;.pdf$&quot;&gt; Header set X-Robots-Tag &quot;noindex, nofollow&quot; &lt;/FilesMatch&gt; Quelle: (Google Developers, Teil 1)[https://developers.google.com/search/docs/advanced/robots/robots_meta_tag] How can I prevent my PDF files from appearing in search results; or if they already do, how can I remove them? The simplest way to prevent PDF documents from appearing in search results is to add an X-Robots-Tag: noindex in the HTTP header used to serve the file. If they’re already indexed, they’ll drop out over time if you use the X-Robot-Tag with the noindex directive. For faster removals, you can use the URL removal tool in Google Webmaster Tools. Quelle: Google-Developers, Teil 2 "],["webdevelopment.html", "Chapter 3 Webdevelopment 3.1 Synonyme", " Chapter 3 Webdevelopment Hier liste ich allgemein Nützliches &amp; Begriffe zum Thema “WebDev”. 3.1 Synonyme Toggle // Ein- &amp; Ausschaltknopf "],["css.html", "Chapter 4 CSS 4.1 CSS Operatoren 4.2 Responsive-Design: use Media-Queries 4.3 Padding-Abkürzung 4.4 Necessary CSS in all Projects 4.5 CSS-Grid Layout-Modell 4.6 Adding Box-Shadows 4.7 Optional Line-Break 4.8 Relative Font-Size 4.9 Advanced Positioning 4.10 Hover-Effekte 4.11 Sonstiges", " Chapter 4 CSS 4.1 CSS Operatoren Bei CSS gibt es eine Vielzahl an sogenannten Operatoren, die verwendet werden, um die jeweiligen HTML-Elemente zu selektionieren. Ich habe hier eine Liste mit den wichtigsten CSS-Operatoren erstellt: .main-container &gt; h2: Selects all the &lt;h2&gt;-Tags that are a DIRECT Child of the class ‘.main-container’. div.main-container.green: Select all the &lt;div&gt;-Tags, that have the class ‘.main-container’ AND also the ‘.green’ class. .main-container, .red: Notice the comma when I wrote the two classes! This means that we are going to select all HTML-Elements that have the class ‘.main-container’ OR the class ‘.red’. .main-container .blue: Select all HTML-elements with the class ‘.main-container’ and - WITHIN those HTML-Element with the ‘.main-container’-class - it selects all the HTML-Elements that have - additionally - the class ‘.blue’. If both of these conditions are NOT simulatenously met, then it will NOT apply the blue-background color!!! Note that WITHIN means not necessarily that the nested HTML-Element should be a direct child of the ‘.main-container’ element! 4.2 Responsive-Design: use Media-Queries Wenn du eine Webseite kreierst, dann musst du zuallerst sicherstellen, dass die Webseite sowohl für Smartphones, aber auch für Tablets und Desktops super aussieht. Dies wird mittels sogenannten Media-Queries bewerktstelligt. Im Folgenden habe ich dir diejenigen Mediaqueries eingeblendet, die öfters vorkommen: /* --- Extra-Small devices (phones, 400px and down) --- */ @media only screen and (max-width: 400px) {...} /* --- Small devices (phones, 600px and down) --- */ @media only screen and (min-width: 600px) {...} /* Pretty small devices (portrait tablets and large phones, 600px and up) */ @media only screen and (min-width: 600px) {...} /* Medium devices (landscape tablets, 768px and up) */ @media only screen and (min-width: 768px) {...} /* Large devices (laptops/desktops, 992px and up) */ @media only screen and (min-width: 992px) {...} /* Extra large devices (large laptops and desktops, 1200px and up) */ @media only screen and (min-width: 1200px) {...} Wenn du auf Screen-Grössen zwischen zwei bestimmten Werten abzielst, dann kann man dies auch tun: @media only screen and (min-width: 480px) and (max-width: 989px) { } 4.3 Padding-Abkürzung Es gibt bei CSS diverse Abkürzungen, insbesondere wirst du vor allem diejenige margin und padding sehr oft begenenen: 4.3.1 Fall 1: Margin / Padding has 4 Values div { padding: 25px 50px 75px 100px; } Die Merkregel ist diejenige: es dreht sich im Uhrzeigersinn. padding: 25px 50px 75px 100px; top padding is 25px right padding is 50px bottom padding is 75px left padding is 100px 4.3.2 Fall 2: Margin / Padding has 3 Values div { padding: 25px 50px 75px; } padding: 25px 50px 75px; top padding is 25px right and left paddings are 50px bottom padding is 75px 4.3.3 Fall 3: Margin / Padding has 2 Values div { padding: 25px 50px; } padding: 25px 50px; top and bottom paddings are 25px right and left paddings are 50px 4.3.4 Fall 4: Margin / Padding has 1 Value div { padding: 25px; } padding: 25px; all four paddings are 25px 4.4 Necessary CSS in all Projects 4.4.1 Box-Sizing: Border-Box Property Wenn wir beginnen unsere Webseite zu stylen, dann werden wir diese Property als aller erstes Element einfügen und zwar so: * { boxsizing: border-box; } Wobei * dabei - Wort wörtlich übersetzt - bloß “alles” heisst. Weshalb brauchen wir border-box als Property? Angenommen, ich habe folgendes &lt;div&gt; gestylt: div { width: 300px; padding: 25px; } Here, the &lt;div&gt;-element is given a width of 300px. However, the actual width of the &lt;div&gt;-element will be 350px (300px + 25px of left padding + 25px of right padding). To keep the width at 300px, no matter the amount of padding, you can use the box-sizing property. This causes the element to maintain its actual width; if you increase the padding, the available content space will decrease. Beispiel zur Illustration: https://www.w3schools.com/css/tryit.asp?filename=trycss_padding_width2 4.4.2 CSS for Images In order to have images that behave “normally” on the website, we will need to implement the following for ALL images: img { width: 100%; } Weshalb brauchen wir das? This will make the image to take 100% of the width of the parent-element, which - oftentimes - are &lt;div&gt;’s. 4.4.3 Center a &lt;div&gt; AND make it Responsive Moderne Webseiten heutzutage verwenden &lt;section&gt;, um die einzelnen Bereiche einer Webseite nach “Thema” zu ordnen. Beispielsweise besteht eine Webseite aus einer Navigation, einem Hauptteil und einem Footer (= 3 Sections). In der Code-Struktur werden diese HTML &lt;section&gt;-Elemente häufig als “Main Container” // “Wrapper” verwendet, die viele weitere HTML-Elemente enthalten (“nested HTML”). Es ist zum Standard geworden, dass man bei diesen äusseren Wrappern jeweils das (responsive) padding &amp; margin festlegt. Ausserdem werden diese jeweils zentriert, damit es schöner aussieht: .main-container { width: 90vw; /* For Responsive design, this is the &quot;state-of-the-art&quot; thing to do for our containers // wrappers. */ margin: 0 auto; /* Automatic centering of a &lt;div&gt;. */ padding: 40px 0; /* Bringt Luft in das Ganze, indem man - dem obere &amp; untere Rand - 40px mehr &quot;white space&quot; lässt.*/ } 4.5 CSS-Grid Layout-Modell CSS Grid ist eines (von insgesamt zwei) der wichtigsten Modelle, um eine Webseite von Grund auf zu kreieren. 4.5.1 Grundstruktur für das HTML Um CSS Grid verwenden zu können, müssen die HTML-Ekemente folgende Grundstruktur aufweisen (ansonsten funktioniert das CSS Grid gar nicht!): &lt;div class=&quot;grid-container&quot;&gt; &lt;div class=&quot;grid-item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;5&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;6&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;7&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;8&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;9&lt;/div&gt; &lt;/div&gt; 4.5.2 CSS for Grid-Container Es gibt eine Reihe von CSS Grid Properties, aber hier sind die 3 wichtigsten, um bereits ein sehr schönes UND responsives Design zu erhalten: .posts-main-container{ display: grid; /*Aktiviert das CSS-Grid Modell für das HTML. */ grid-template-columns: repeat(3, 1fr); /* Für ein 3-Spaltiges Grid-Layout, welches - aufgrun des &quot;1fr&quot; - responsive ist. */ grid-gap: 40px; } 4.5.3 justify-content VS. justify-item VS. justify-self Hier ist vor allem zu beachten, dass die justify-content- &amp; justify-item-properties auf den grid-container angewendet werden, während - im Kontrast dazu - die justify-self-property auf den verschiedenen grid-items angewendet werden kann! justify-content allows you to position the grid within it’s grid container. This is why the justify-content property will have no effect if the grid-container is the same size as the grid. (Which is always the case if you use fr units). This is also why it can have the values: space-around, space-between and space-evenly (In addition to start, end, centre and stretch), which will break up the grid and place the grid items within the grid container. This is a property of the grid-container. justify-items allows you to set a default position for content placed in the grid’s grid items (A grid item being a box in the grid, as defined in Michael_B’s post). This is a property of the grid-container. justify-self allows you to override the default position of content in an individual cell. This will override the position set by justify-items. Hence, if you use justify-self on all children of the container, setting justify-items on the grid container will have no effect. This is a property of the content inside a grid-item. As you might expect, all of this also applies to the align-* properties! 4.5.4 Nützliche Quellen justify-content VS. justify-item VS. justify-self: https://stackoverflow.com/questions/48535585/what-is-difference-between-justify-self-justify-items-and-justify-content-in-cs 4.6 Adding Box-Shadows When building Produkt-Karten, you will probably want to make the cards more 3D-like. You can do this by simply addding the following CSS-code: box-shadow: rgb(0 0 0 / 64%) 0px 8px 22px -12px; 4.7 Optional Line-Break Manchmal gibt es Wörter, die sehr lang sind, zum Beispiel “Klangoptimierungszubehör”. Das Problem, welches dabei passieren könnte, wäre, dass kleine Smartphones solche Wörter nicht auf einer einzigen Linie abbilden können. Es gibt jedoch das &amp;shy;-HTML-Kürzel, welches dieses Problem behebt: &lt;div id=&quot;example-paragraphs&quot;&gt; &lt;p&gt;Fernstraßenbauprivatfinanzierungsgesetz&lt;/p&gt; &lt;p&gt;Fernstraßen&amp;shy;bau&amp;shy;privat&amp;shy;finanzierungs&amp;shy;gesetz&lt;/p&gt; &lt;/div&gt; Erklärung: The &amp;shy; HTML element represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location. 4.8 Relative Font-Size Wenn man eine Webeite für den Screen, für das Tablet UND für das Telefon gleichzeitig designt, dann spielen die relative font-size eine Rolle. Hierfür bietet CSS eine Reihe von verschiedenen units an: All the different font-size values that you can choose from in CSS 4.9 Advanced Positioning transform: translate(x,y): Dies erlaubt, ein Objekt zu bewegen entlang der x- und y-Achse des PCs. Hier ein Beispiel, wie man translate(2,1) anwendet zur Illustration 4.10 Hover-Effekte 4.10.1 Weisse Hyper-Links Für eine Navigation mit weisser Farbe (= #fff) empfiehlt sich folgender Code für das Hovern mit der Maus, über den Link: .link:hover{ color: #c7c7c7; /* Das ist ein leicht dunkleres Weiss, beinahe grau, ohne, dass es störend wirkt. */ } 4.11 Sonstiges 100 vh = Full screen of the Browser-Fenster. Apple zum Beispiel verwendet: 35vh und 55vh. "],["javascript.html", "Chapter 5 JavaScript 5.1 Definitionen", " Chapter 5 JavaScript 5.1 Definitionen Callback Function: This is a function, which will be called by another function some time in the future. It is possible, that this function is called (by the other function) multiple times in the future. (Normal) Queue: Given that you have a list // array: a “normal queue” adds new items to the back, picks item from the front of the list. Deffering Images: This means delaying the loading of images that appear below-the-fold (= not on viewport) on the page. "]]
