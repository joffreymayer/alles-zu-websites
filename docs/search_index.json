[["index.html", "My Knowledge Database for Websites Chapter 1 Set-Up 1.1 Backend: Git &amp; Github", " My Knowledge Database for Websites Joffrey Anthony 2022-02-02 Chapter 1 Set-Up 1.1 Backend: Git &amp; Github Create a Github-Account. We also need to download Git, a Version-Control System, because you can track all your changes and it is easier to collaborate on Code-Projects. Next, we need to link our Github-Account to Git. To do this, use the Terminal and type in the following two commands: 3.1) git config --global user.name \"YOUR GIBHUB USERNAME HERE\" 3.2) git config --global user.email \"your_github_email@example.com\" Create a Public &amp; Private SSH-Key in order to not always type in your password. Follow the instruction of this Youtube-Tutorial (ab 2:40-4:03). In order to be able to use the SSH-Key, you need to follow my instruction in the Video on my local computer, situated on the following path: /Users/jomaye/Nextcloud/Dokumente/Life/Video Tutorials/Github/ssh-key-zum-laufen-bringen.mov. If the Git code that I provided in the video does not work, then I recommend you to also try this code out: git remote set-url --add --push origin git@github.com:yourGithubUsername/yourRepo.git 1.1.1 Create a new Branch To create a new branch AND switch to it at the same time, you can use the short-hand command in the terminal: git checkout -b NEW_BRANCH_NAME The above is the same as the following (longer) code: $ git branch NEW_BRANCH_NAME $ git checkout NEW_BRANCH_NAME Achtung: BEFORE you create a new branch, make sure to have committed every change, because git will be very confused otherwise! 1.1.2 Check current Branch you are currently on The following code should show you all the local branches of your repo. The starred branch is your current branch: git branch 1.1.3 Merge Changes in “new branch” into “Master”-Branch This can be achieved via a pull-request. All you have to do is: check out // switch to the branch you wish to merge into (= this is usually the master-branch) and then run the git merge command: $ git checkout master Switched to branch &#39;master&#39; $ git merge BRANCH_NAME_THAT_YOU_WANT_TO_MERGE_INTO_MASTER_BRANCH Merge made by the &#39;recursive&#39; strategy. Achtung: BEFORE you merge back your changes that are on your branc, make sure to commit every change, because git will NOT allow you to switch to your master-branch otherwise! 1.1.4 Create a Bookdown-Website Use this Bookdown-Template to create an awesome website like this one, you are currently at right now. Follow all the instruction of this 5 Minutes Youtube-Video. "],["seo.html", "Chapter 2 SEO 2.1 Outline 2.2 PDFs", " Chapter 2 SEO Für die Webseiten-Indexierung innerhalb der Google-Suchmaschine ist es von grösster Bedeutung, dass du die Kunst des Seo (Search Engine Optimization) beherrschts. 2.1 Outline Das Wichtigste, damit deine Webseite auf dem Internet effizient in der Google-Suche gefunden wird - idealerweise auf #1 - ist eine “korrekte” HTML-Struktur (= Outline) zu haben. Seite, um dein aktuelles Outline zu checken: https://gsnedders.html5.org/outliner/ Beispiel, für ein korrektes Outline für das Keyword Accuphase und der URL https://audiophil-dreams.com/accuphase.html 2.1.1 Wenn dein Outline “falsch” ist Falls du nicht zufrieden bist mit deinem aktuellen Outline, dann empfehle ich dir die folgende Methode: https://www.youtube.com/watch?v=QDq-KVE5ZSA 2.2 PDFs Ein PDF wird von Google grundsätzlich automatisch in die Suchmaschine aufgenommen. Oftmals verwendest du PDFs jedoch als Ergänzungen zu den Type in the following into you .htaccess-File, for Appache-Servers: &lt;Files ~ &quot;\\.pdf$&quot;&gt; Header set X-Robots-Tag &quot;noindex, nofollow&quot; &lt;/Files&gt; If you have NGINX, you need this code instead: location ~* \\.pdf$ { add_header X-Robots-Tag &quot;noindex, nofollow&quot;; } To check if it worked, you need to view the HTTP Header of your PDF. You can do this via the developer tools in the Google Chrome Browser (by hitting F12). Developer-Tools For a more precise explanation, I recommend this site. This is the output you should see being printed If the solution above does not work, I have found an alternative way: &lt;FilesMatch &quot;.pdf$&quot;&gt; Header set X-Robots-Tag &quot;noindex, nofollow&quot; &lt;/FilesMatch&gt; Quelle: (Google Developers, Teil 1)[https://developers.google.com/search/docs/advanced/robots/robots_meta_tag] How can I prevent my PDF files from appearing in search results; or if they already do, how can I remove them? The simplest way to prevent PDF documents from appearing in search results is to add an X-Robots-Tag: noindex in the HTTP header used to serve the file. If they’re already indexed, they’ll drop out over time if you use the X-Robot-Tag with the noindex directive. For faster removals, you can use the URL removal tool in Google Webmaster Tools. Quelle: Google-Developers, Teil 2 "],["webdevelopment.html", "Chapter 3 Webdevelopment 3.1 Synonyme 3.2 Definitionen 3.3 Image-Management 3.4 How Front-End &amp; Backend work together 3.5 How to build and think about an Application", " Chapter 3 Webdevelopment Hier liste ich allgemein Nützliches &amp; Begriffe zum Thema “WebDev”. 3.1 Synonyme Backend // Server Constraint // Rule // Annahme(n) (above the) Fold // Viewport // Alles, was beim Laden einer HTML-Seite “visible” wird auf dem Screen eines Users Store data (for example, in an array) // present data Toggle // Ein- &amp; Ausschaltknopf user agent // browser Weiterleitung // forwarding // routing(?) Parse // In der Umwandlung A --&gt; B, ist mit dem Pfeil das “parsen” gemeint! Beispiel: Umwandlung - beispielsweise der HTML-Sprache - in die Dokumentstruktur “DOM”, damit diese - via einem Renderer - visuell dargestellt werden kann im Browser. DPR // device-pixel-ratio 3.2 Definitionen Art Direction Problem: This is the problem of a responsive image, which - on the Computer // landscape-mode - you can see the relevant parts of the image, but - on an Ipad // Iphone // potrait-mode - you need to crop the image differently, otherwise you . This problem can be solved with the &lt;picture&gt;- &amp; &lt;source&gt;-element in HTML (as well as the srcset-attribute in the CSS of the &lt;source-element), that allows you tell the browser, which image it needs to select, based on the screen-size it faces. Bandwidth: Bandwidth in website hosting is the amount of data your website can transfer to your users in a given amount of time. Why is this important: When you deal with images, especially for smaller screens, such as phones. The problem here is, that a very big images can take alot of bandwidth (up to 60%). As a consequence, it slows down the performance of the site, which is the most important thing Google cares about when ranking websites! CRUD: This is an acronym, which refers to the 4 functions, that are considered necessary to implement a persistent storage application: creat read, update and delete. Example of a CRUD Application: Facebook, Instagram or TikTok, because each of those apps lets you: C- Create posts, videos, comments, likes etc. R- Read posts, view pictures, see like counts, see followers of other users etc. U- Edit posts, pictures, comments, profiles and update them etc. and finally D- Delete posts, pictures, comments, videos etc. Dependency // Dependencies: A dependency is a third-party bit of software that was probably written by someone else and ideally solves a single problem for you. A web project can have any number of dependencies, ranging from none to many, and your dependencies might include sub-dependencies that you didn’t explicitly install — your dependencies may have their own dependencies. Example: A useful dependency that your project might need is some code to calculate relative dates as human-readable text. You could certainly code this yourself, but there’s a strong chance that someone else has already solved this problem — Vorteil 1: Why waste time reinventing the wheel? Vorteil 2: Moreover, a reliable third-party dependency will likely have been tested in a lot of different situations, making it more robust and cross-browser compatible than your own solution. Package Manager: A package manager is a system that will manage your project dependencies. Example: When you use a dependenciy // third-party code, you will need to update it, if a new version gets released. If you have MANY dependencies, then you will need a package manager such as npm, because it will guarantee that the updated code is added and the old one is removed cleanly. Why should you use a packet manager?: In theory, you may not need a package manager and you could manually download and store your project dependencies, but a package manager will seamlessly handle installing and uninstalling packages. Important Detail about npm: The npm packet manager for JavaScript is the analog thing as a virtual environment in python! Quelle: See the last answer on this Stack-Overflow thread. Usability Testing: Suche jemand, der deine Webseite austestet, die du gerade konstruiert hast. Er soll dir ein ehrliches Feedback geben. Wichtig: We test the Site, not the user. It is important that the user knows, that he is not tested, but rather the website. The user can’t do anything wrong. 3.3 Image-Management A website’s browser has the task of downloading those images when it reads an HTML-document. Most of the time, images are the entities that need the most time to load on a website, which is why a site with many images can have a big (negative) impact on the website’s performance, because many images take a looot of time to load and - therefore - you will have a poor user-experience, especially on mobile. That’s why you need a good image-management when building websites. The following areas lead to a better image-management and - hence - better site-performance: Resolution of images Caching strategies tha use CDNs Implement Lazy-Loading 3.3.1 Resolution of images When you need a responsive-solution for your images, the least complicated thing to do, is to tackle the image-resolution of your images that are displayed on the screen. It may seem complicated at first sight, but understanding this chapter will be key for later simplicity &amp; a significant increase in the site’s performance. 3.3.2 The Problem As you may know, I like to show my visitors on the site a beautiful hero-image. I am convinced that a it increases the visitor’s interest in the site. However - from a technical point of view - you get terrible LCP-Scores (= largest contentful paint), since the mermory-heavy image you need to show to the user needs to be downloaded from a server. This can take a large amount of data to transfer (up to 60%) - especially when big images are requested from a user // browser to the server - which is why the loading time can be very long. As a consequence, the performance (in terms of loading time) of your site is poor - particularly on phones - and the visitor is going to leave your site, IF the loading takes too long. 3.3.3 The solution Nevertheless - with the help of the picture- &amp; source-element - you can solve the problem of a memory-intensive image that need to be downloaded for a hero-image. In this Youtube-Video of myself, I show &amp; explain the solution I have chosen. To get a very solid foundation about the topic: https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images To get a very good example of applying this foundation in practice: https://formidable.com/blog/2019/responsive-images/ A second good example: https://www.smashingmagazine.com/2014/05/responsive-images-done-right-guide-picture-srcset/ 3.3.4 Useful things to know about the Topic When you use the &lt;picture&gt;-element in combination with the &lt;source&gt;-element, it is required that you use a &lt;img&gt;-Tag at the end. Most of the websites - and even the “official” source - however, don’t tell you how this &lt;img&gt; work exactly (but I will, because this little bit of keyknowledge will make you understand, why the “performance”-score in the light-house is improved after you use the &lt;picture&gt;- &amp; &lt;source&gt;-elements): Important: The &lt;picture&gt;-element itself is invisible, a bit like a magical span. Its source-elements are just there for the browser to draw alternate versions of the image from. Once a source URL is chosen, that URL is fed to the &lt;img&gt;-Element. Additionally, this means that any styles that you want to apply to your rendered image (like, say, max-width: 100%) need to be applied to the &lt;img&gt;-element, not to the &lt;picture&gt;-element. 3.3.5 Cache When using a website, the images oftentimes stay relatively “static”, that is they - oftentimes - do not change over time. This fact - that the image-content does almost never change over time - can be exploited in order to dimish loading-time significantly with the help of a cache-strategy. 3.3.5.1 The Problem By storing the images on our website’s server (VTX), the user’s browser will have to always make requests. Because I have many images, we have a lot of image-requests per page that the user renders on his phone. Hence, the loading time takes long. 3.3.5.2 The theoretical Solution It would be much more efficient - from a performance // loading perspective - if the user had those images already stored in their computer’s internal (cache) memory. This is where CDNs come into play: those are servers that are distributed all across the globe and that: Visit our website. Then cache // store the images on their server, which is close to the user, from a geographical standpoint. When a user visit our website, the requests for images will be forwarded to the (geographically, much more close the user) CDNs that will already have downloaded the images of our site. This results in a much faster loading-time of our website and an increase in the user’s experience. 3.3.5.3 The practical Solution In order to use a CDN, I recommend this website as a tool to implement a caching-strategy: https://imagekit.io/ 3.3.6 Lazy-Loading 3.3.6.1 The Problem When you code an HTML-page and you include a bunch of images, you will have to tell the browser, on which path the images can be loaded via the src-atribute of the &lt;img&gt;-tag. However - IF you have many &lt;img src=....&gt;-tags on your site - the browser will automatically load them all at once. And because loading image-entities is one of the most slow process when it comes to make everything visible on the user’s browser, having lot’s of images can take a long time to load. More specifically, IF a user directly follows a link to another page on our site, having downloaded all the pages is very inefficient, since the website-visitor will not have seen those images that are at the bottom of the site. 3.3.6.2 The theoretical Solution With JavaScript, we can change the behavior of how load &lt;img src=\"...\"&gt;-tags. In lazy-loading, we can tell the browser - with the help of some JavaScript code - that it only needs to load the images, that are visible in the user’s viewport // browser-window (= visible portion of the screen). This way, all the images that are on the bottom of our pages, will NEVER be loaded, if the user clicks on a link at the TOP of our page. 3.3.6.3 The practical Solution Use the code - which is written in vanilla JavaScript - from this Fireship Youtube-Video to make Lazy-Loading possible. 3.4 How Front-End &amp; Backend work together Very good example &amp; explanations: https://dev.to/gbudjeakp/how-to-connect-your-client-side-to-your-server-side-using-node-and-express-2i71 3.5 How to build and think about an Application Very good example (read the section “App Structure”): https://dev.to/gbudjeakp/how-to-make-applications-from-scratch-without-tutorials-for-beginners-26bg "],["css.html", "Chapter 4 CSS 4.1 CSS Operatoren 4.2 Responsive-Design: use Media-Queries 4.3 Padding-Abkürzung 4.4 Necessary CSS in all Projects 4.5 CSS-Grid Layout-Modell 4.6 Adding Box-Shadows 4.7 Optional Line-Break 4.8 Relative Font-Size 4.9 Advanced Positioning 4.10 Color-Gradients for Text 4.11 Hover-Effekte 4.12 Sonstiges", " Chapter 4 CSS 4.1 CSS Operatoren Bei CSS gibt es eine Vielzahl an sogenannten Operatoren, die verwendet werden, um die jeweiligen HTML-Elemente zu selektionieren. Ich habe hier eine Liste mit den wichtigsten CSS-Operatoren erstellt: *: This is the “Everything”-Selector. .main-container &gt; h2: Selects all the &lt;h2&gt;-Tags that are a DIRECT Child of the class ‘.main-container’. div.main-container.green: Select all the &lt;div&gt;-Tags, that have the class ‘.main-container’ AND also the ‘.green’ class. .main-container, .red: Notice the comma when I wrote the two classes! This means that we are going to select all HTML-Elements that have the class ‘.main-container’ OR the class ‘.red’. .main-container .blue: Select all HTML-elements with the class ‘.main-container’ and - WITHIN those HTML-Element with the ‘.main-container’-class - it selects all the HTML-Elements that have - additionally - the class ‘.blue’. If both of these conditions are NOT simulatenously met, then it will NOT apply the blue-background color!!! Note that WITHIN means not necessarily that the nested HTML-Element should be a direct child of the ‘.main-container’ element! [id^=drop]: Selektiert alle Elemente mit der ID, welche mit “drop” beginnt, also beispielsweise: ‘drop’, ‘drop-1’ ‘drop-2’ etc… Man kann sich diesen CSS-Selektor als eine Art Regular-Expression vorstellen. .toggle + a: Selects the first -element that is placed immediately after each element that has the .toggle-class. 4.2 Responsive-Design: use Media-Queries Wenn du eine Webseite kreierst, dann musst du zuallerst sicherstellen, dass die Webseite sowohl für Smartphones, aber auch für Tablets und Desktops super aussieht. Dies wird mittels sogenannten Media-Queries bewerktstelligt. Im Folgenden habe ich dir diejenigen Mediaqueries eingeblendet, die öfters vorkommen: /* --- Extra-Small devices (phones, 400px and down) --- */ @media only screen and (max-width: 400px) {...} /* --- Small devices (phones, 600px and down) --- */ @media only screen and (min-width: 600px) {...} /* Pretty small devices (portrait tablets and large phones, 600px and up) */ @media only screen and (min-width: 600px) {...} /* Medium devices (landscape tablets, 768px and up) */ @media only screen and (min-width: 768px) {...} /* Large devices (laptops/desktops, 992px and up) */ @media only screen and (min-width: 992px) {...} /* Extra large devices (large laptops and desktops, 1200px and up) */ @media only screen and (min-width: 1200px) {...} Wenn du auf Screen-Grössen zwischen zwei bestimmten Werten abzielst, dann kann man dies auch tun: @media only screen and (min-width: 480px) and (max-width: 989px) { } 4.2.1 Good rule-of-thumb for image-grid In this example, we have a layout that has: - 4 columns on screens larger than 768px, - 2 columns on screens that have a size between 376px-786px, and - 1 column on screens that are smaller than (or equal to) 375px. Quelle: https://formidable.com/blog/2019/responsive-images/ 4.3 Padding-Abkürzung Es gibt bei CSS diverse Abkürzungen, insbesondere wirst du vor allem diejenige margin und padding sehr oft begenenen: 4.3.1 Fall 1: Margin / Padding has 4 Values div { padding: 25px 50px 75px 100px; } Die Merkregel ist diejenige: es dreht sich im Uhrzeigersinn. padding: 25px 50px 75px 100px; top padding is 25px right padding is 50px bottom padding is 75px left padding is 100px 4.3.2 Fall 2: Margin / Padding has 3 Values div { padding: 25px 50px 75px; } padding: 25px 50px 75px; top padding is 25px right and left paddings are 50px bottom padding is 75px 4.3.3 Fall 3: Margin / Padding has 2 Values div { padding: 25px 50px; } padding: 25px 50px; top and bottom paddings are 25px right and left paddings are 50px 4.3.4 Fall 4: Margin / Padding has 1 Value div { padding: 25px; } padding: 25px; all four paddings are 25px 4.4 Necessary CSS in all Projects 4.4.1 Import Font-Styles via Google-Fonts API In order to use different fonts, you will use Google Fonts, on which literally almost all Design-Platform use. The most simplest AND memory-efficient way to do this, is to import only the specific styles that you need. For this, simply paste in the following code into your .css-stylesheet: @import url(&#39;https://fonts.googleapis.com/css2?family=Montserrat&amp;display=swap&#39;); Note that - in the above example - I used the Montserrat-Font and its specific URL. If you need another font’s URL, you simply need to go to the Google-Fonts Website, search for a font with the search-bar and - finally - tap on the + select this style-string. This will trigger a side-navbar, where you have the option of an @import-button –&gt; click it and copy the URL without the &lt;style&gt;-Tags. Now, you can simply paste it into your .css-stylesheet and then use the font-family: Montserrat (or whatever font...) on the elements you want to apply the font to. =) Best Practice: Always import all the styles on the top of your .css-stylesheet! 4.4.2 Box-Sizing: Border-Box Property Wenn wir beginnen unsere Webseite zu stylen, dann werden wir diese Property als aller erstes Element einfügen und zwar so: * { boxsizing: border-box; } Wobei * dabei - Wort wörtlich übersetzt - bloß “alles” heisst. Weshalb brauchen wir border-box als Property? Angenommen, ich habe folgendes &lt;div&gt; gestylt: div { width: 300px; padding: 25px; } Here, the &lt;div&gt;-element is given a width of 300px. However, the actual width of the &lt;div&gt;-element will be 350px (300px + 25px of left padding + 25px of right padding). To keep the width at 300px, no matter the amount of padding, you can use the box-sizing property. This causes the element to maintain its actual width; if you increase the padding, the available content space will decrease. Beispiel zur Illustration: https://www.w3schools.com/css/tryit.asp?filename=trycss_padding_width2 4.4.3 CSS for Images In order to have images that behave “normally” on the website, we will need to implement the following for ALL images: img { width: 100%; } Weshalb brauchen wir das? This will make the image to take 100% of the width of the parent-element, which - oftentimes - are &lt;div&gt;’s. 4.4.4 Center a &lt;div&gt; AND make it Responsive Moderne Webseiten heutzutage verwenden &lt;section&gt;, um die einzelnen Bereiche einer Webseite nach “Thema” zu ordnen. Beispielsweise besteht eine Webseite aus einer Navigation, einem Hauptteil und einem Footer (= 3 Sections). In der Code-Struktur werden diese HTML &lt;section&gt;-Elemente häufig als “Main Container” // “Wrapper” verwendet, die viele weitere HTML-Elemente enthalten (“nested HTML”). Es ist zum Standard geworden, dass man bei diesen äusseren Wrappern jeweils das (responsive) padding &amp; margin festlegt. Ausserdem werden diese jeweils zentriert, damit es schöner aussieht: .main-container { width: 90vw; /* For Responsive design, this is the &quot;state-of-the-art&quot; thing to do for our containers // wrappers. */ margin: 0 auto; /* Automatic centering of a &lt;div&gt;. */ padding: 40px 0; /* Bringt Luft in das Ganze, indem man - dem obere &amp; untere Rand - 40px mehr &quot;white space&quot; lässt.*/ } Problem von margin: 0 auto? The auto-margin-property only works for &lt;block&gt;-Elements. If you have a &lt;inline&gt;-Element, then you cannot apply width &amp; height, as well as the top- &amp; bottom-property! Solution: If you have an &lt;inline&gt;-Element, you can simply display: block! :) 4.4.5 Use Google-Fonts In your Projects, you will oftentimes want to use a beautiful font rather than the default ones. Step 1: Go to the Google-Fonts Website Step 2: Search for a font, for example Raleway. Step 3: Follow the steps on the image below These are the remaining steps on this Image. You need to insert the link into your CSS file via @import, like in this example: https://www.youtube.com/watch?v=Sv_NAxi_jNs&amp;t=8m6s) 4.4.6 Write something on top of an Image In order to write some text over an image, you can use the a trick that uses relative-position on a parent HTML-element and absolute-position on a child HTML-element. In order to use this, make sure to have the following HTML-structure: &lt;div class=&quot;container&quot;&gt; &lt;img src&quot;./images/Your_image.jpg&quot; alt=&quot;This is an example&quot;/&gt; &lt;div class=&quot;text-container&quot;&gt; &lt;h1&gt;THE WORLDO&lt;/h1&gt; &lt;p&gt;Lorem Ipsum Dolor ...&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; Additionally, the CSS-structure looks like this: .container { position: relative; /*This is important, since it will allow to ABSOULTELY-position our CHILD-element (= hier: text-container) RELATIVELY to this parent-container.*/ } img { /* In order to display the image properly, we need this styling... */ width: 100%; height: auto } .text-container { position: absolute; /*This is very important, since it will allow to ABSOULTELY-position our CHILD-element (= hier: text-container) RELATIVELY to this parent-container.*/ left: 50%; /* This is part of a &quot;hacker-trick&quot; described on the next CSS-Line...*/ transform: translate(-50%, -50%); /* This is a &quot;hacker-trick&quot; to always center our text in the middle of a screen (egal ob phone, tablet or desktop), when we absolutely porition this child-element.*/ text-align: center; /*The rest here is additional styling...*/ padding: 15px; border-radius: 10px; background-color: rgba(204,204,204, 0.65); } 4.5 CSS-Grid Layout-Modell CSS Grid ist eines (von insgesamt zwei) der wichtigsten Modelle, um eine Webseite von Grund auf zu kreieren. 4.5.1 Grundstruktur für das HTML Um CSS Grid verwenden zu können, müssen die HTML-Ekemente folgende Grundstruktur aufweisen (ansonsten funktioniert das CSS Grid gar nicht!): &lt;div class=&quot;grid-container&quot;&gt; &lt;div class=&quot;grid-item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;5&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;6&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;7&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;8&lt;/div&gt; &lt;div class=&quot;grid-item&quot;&gt;9&lt;/div&gt; &lt;/div&gt; 4.5.2 CSS for Grid-Container Es gibt eine Reihe von CSS Grid Properties, aber hier sind die 3 wichtigsten, um bereits ein sehr schönes UND responsives Design zu erhalten: .posts-main-container{ display: grid; /*Aktiviert das CSS-Grid Modell für das HTML. */ grid-template-columns: repeat(3, 1fr); /* Für ein 3-Spaltiges Grid-Layout, welches - aufgrun des &quot;1fr&quot; - responsive ist. */ grid-gap: 40px; } 4.5.3 Responsiveness Damit ein CSS-Grid “responsive” wird, musst du mit Media-Queries arbeiten. Dabei definierst du zunächst, wie viele Spalten das Grid-System haben soll, wenn es auf einem sehr grossen Screen (= Desktop) aussehen soll und - anschliessend mittels Media-Queries - wie viele Spalten es auf dem Tablet &amp; Phone haben soll. Dabei veränderst du eigentlich nur die CSS-Property grid-template-columns, wie das folgende Beispiel zeigt, bei dem ich jeweils für 3 Bildschirme die Anzahl an Spalten verringere (3 Spalten auf Desktop, dann 2 Spalten auf Ipad, dann 1 Spalte auf Phones): .grid-container { display: grid; grid-template-columns: repeat(3, 1fr); /* 3 Spalten für Desktops */ grid-gap: 40px; } @media screen and (max-width: 980px){ .einzel-vorstellung { grid-template-columns: repeat(2, 1fr); /* Nur noch 2 Spalten für Tablets */ } } @media screen and (max-width: 540px){ .einzel-vorstellung { grid-template-columns: repeat(1, 1fr); /* Kleine telefone haben bloss noch 1 Spalte */ } } Beispiel: Schaue dir auch noch mein Youtube-Video zum Thema an. Alternative ohne @media&lt;/&gt;: Dieses Youtube-Video von WebDev Simplified (ab 2:50-3:30) zeigt eine alternative Methode anhand von der auto-fill-property &amp; minmax()-Funktion. 4.5.3.1 Asymmetric 2-Column-Grid Angenommen, ich möchte ein 2-Column-Grid Layout, aber die 1. Spalte sollte nicht 50% // die Hälfte des Screens an Platz einnehmen, sondern “nur” 30%.: .grid-container { grid-template-columns: 30% 1fr; /* Hier habe ich ein Grid erstellt mit 2 Spalten, wobei die 1. Spalte nur 1/3 des viewport-widths ausmacht, während die 2. Spalte den &quot;Rest&quot; (= 1fr) ausmacht, was grundsätzlich 2/3 entspricht. */ } 4.5.4 justify-content VS. justify-item VS. justify-self Hier ist vor allem zu beachten, dass die justify-content- &amp; justify-item-properties auf den grid-container angewendet werden, während - im Kontrast dazu - die justify-self-property auf den verschiedenen grid-items angewendet werden kann! justify-content allows you to position the grid within it’s grid container. This is why the justify-content property will have no effect if the grid-container is the same size as the grid. (Which is always the case if you use fr units). This is also why it can have the values: space-around, space-between and space-evenly (In addition to start, end, centre and stretch), which will break up the grid and place the grid items within the grid container. This is a property of the grid-container. justify-items allows you to set a default position for content placed in the grid’s grid items (A grid item being a box in the grid, as defined in Michael_B’s post). This is a property of the grid-container. justify-self allows you to override the default position of content in an individual cell. This will override the position set by justify-items. Hence, if you use justify-self on all children of the container, setting justify-items on the grid container will have no effect. This is a property of the content inside a grid-item. As you might expect, all of this also applies to the align-* properties! 4.5.5 Nützliche Quellen justify-content VS. justify-item VS. justify-self: https://stackoverflow.com/questions/48535585/what-is-difference-between-justify-self-justify-items-and-justify-content-in-cs 4.6 Adding Box-Shadows When building Produkt-Karten, you will probably want to make the cards more 3D-like. You can do this by simply addding the following CSS-code: box-shadow: rgb(0 0 0 / 64%) 0px 8px 22px -12px; 4.7 Optional Line-Break Manchmal gibt es Wörter, die sehr lang sind, zum Beispiel “Klangoptimierungszubehör”. Das Problem, welches dabei passieren könnte, wäre, dass kleine Smartphones solche Wörter nicht auf einer einzigen Linie abbilden können. Es gibt jedoch das &amp;shy;-HTML-Kürzel, welches dieses Problem behebt: &lt;div id=&quot;example-paragraphs&quot;&gt; &lt;p&gt;Fernstraßenbauprivatfinanzierungsgesetz&lt;/p&gt; &lt;p&gt;Fernstraßen&amp;shy;bau&amp;shy;privat&amp;shy;finanzierungs&amp;shy;gesetz&lt;/p&gt; &lt;/div&gt; Erklärung: The &amp;shy; HTML element represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location. 4.8 Relative Font-Size Wenn man eine Webeite für den Screen, für das Tablet UND für das Telefon gleichzeitig designt, dann spielen die relative font-size eine Rolle. Hierfür bietet CSS eine Reihe von verschiedenen units an: All the different font-size values that you can choose from in CSS 4.9 Advanced Positioning transform: translate(x,y): Dies erlaubt, ein Objekt zu bewegen entlang der x- und y-Achse des PCs. Hier ein Beispiel, wie man translate(2,1) anwendet zur Illustration 4.10 Color-Gradients for Text For styling reasons, it can be very nice to make your website stand out by using colors for your fonts that gradially become darker / brighter. Here is the code that you need to implement into your CSS (note: here, I give you the code that can be implemented into the html directly): style=&quot; background: -webkit-linear-gradient(#ee9c38, #b3680e); -webkit-background-clip: text; -webkit-text-fill-color: transparent;&quot; 4.10.1 When to use? This method should be used at the very end, when you are styling your website and the whole code is already implemented. 4.10.2 Quellen Webseite mit Tools: https://cssgradient.io/color-shades/ Google extension that is nice to have when creating gradients: https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp/related?hl=de 4.11 Hover-Effekte 4.11.1 Weisse Hyper-Links Für eine Navigation mit weisser Farbe (= #fff) empfiehlt sich folgender Code für das Hovern mit der Maus, über den Link: .link:hover{ color: #c7c7c7; /* Das ist ein leicht dunkleres Weiss, beinahe grau, ohne, dass es störend wirkt. */ } 4.12 Sonstiges 100 vh = Full screen of the Browser-Fenster. Apple zum Beispiel verwendet: 35vh und 55vh. "],["javascript.html", "Chapter 5 JavaScript 5.1 Definitionen 5.2 Important Questions to know about 5.3 Important JavaScript-Methods", " Chapter 5 JavaScript 5.1 Definitionen Callback Function: A 25 seconds Video that explains this concept. In my words: This is a function, which will be called // executed by another function - onClick() is an example of such a function, which is an Event that occurs, when a User clicks on a button - some time in the future // right after you executed the first function (onClick()). It is possible, that this function is called (by the other function) multiple times in the future. Note: Callback Functions - that are activated by Events - are one of the most important concepts of JavaScript! (Normal) Queue: Given that you have a list // array: a “normal queue” adds new items to the back, picks item from the front of the list. Deffering Images: This means delaying the loading of images that appear below-the-fold (= not on viewport) on the page. 5.2 Important Questions to know about Putting &lt;script&gt;-Tags on the very bottom of the page, just before the ending &lt;/body&gt;-Tag VS. &lt;script&gt;-Tags in the &lt;head&gt;-Bereich, on the very top of the page, when using JavaScript? Fakt: The very special thing about a &lt;script&gt;-Tag, is that - when the browser is reading your HTML-Document - **it will stop loading everything else, when it arrives and loads a &lt;script&gt;-Tag. Problematische Konsequenz des obigen Faktes: Thus - if you have a huge and very complicated &lt;script&gt;-Tag that takes a long time to run - the content may stop loading and the user will wait, which is NEVER a good idea. 2 possible Solutions to the Problem above: Put the &lt;script&gt;-Tag at the very bottom of your page, since this will cause the browser to always read the JavaScript, when everything else is loaded. If you want, you can still put your &lt;script&gt; into the &lt;head&gt;-section at the very top of the page, but the &lt;script&gt;-Tag must contain a async property, like it is shown in this video, 2:47-3:30. This will make sure the script is loaded SIMULTANEOUSLY to the &lt;body&gt;, hence removing the default-behavior of “stop loading everything else when loading a &lt;script&gt;-Tag”. However, we - furthermore - will also need to tell JavaScript, that it should only start looking for the HTML-elements to interact with, when the entire &lt;body&gt; has already been loaded. This can be achieved by checking the readyState. This video, 16:06-18:22 shows how to do it. 5.3 Important JavaScript-Methods .html() = This allows you to change the content of an HTML-element. For example, if you want to change something you have written in a Paragraph. .position() = This allows you to change the position of an HTML-element on the page. .value() = This allows you to access the value of an HTML-element. For example, if you have a slider (= that goes from a maximum to a minimum value), you can retrieve its value by using this .value()-method). "],["gsap.html", "Chapter 6 GSAP 6.1 Advantages of using GSAP 6.2 API 6.3 Synonyme", " Chapter 6 GSAP GSAP is a JavaScript library to handle animations. It can be used for: Lazy Loading Images: This is the main purpose of why I am using GSAP, since it allows me to load images only when they enter the viewport // visible screen of the user. 6.1 Advantages of using GSAP It is free for you to use (as long don’t sell projects to anyone). There are many examples of implementations on Codepen. 6.2 API Tween (all these methods return a Tween-Instance): gsap.to() Example: gsap.to(\".box\", {rotation: 27, x: 100, duration: 1}); gsap.from() gsap.fromTo() Quelle: https://greensock.com/docs/v3/GSAP/Tween Timelines: Animate multiple objects, one after the other. It acts as a container for Tweens, making it simple to control them as a whole –&gt; you don’t need to add a delay-animation after every following object. Quelle: https://greensock.com/docs/v3/GSAP/Timeline 6.2.1 Most frequent Methods when using Tweens-Classes pause( atTime:Number, suppressEvents:Boolean ): Pauses the instance, optionally jumping to a specific time. Quelle: https://greensock.com/docs/v3/GSAP/Tween/pause() progress( value:Number, suppressEvents:Boolean ): Gets or sets the tween’s progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete. Quelle: https://greensock.com/docs/v3/GSAP/Tween/progress() restart( includeDelay:Boolean, suppressEvents:Boolean ): Restarts and begins playing forward from the beginning. Quelle: https://greensock.com/docs/v3/GSAP/Tween/restart() resume(): Resumes (= Forstsetzung) playing (= Wiedergabe) without altering direction (forward or reversed). Quelle: https://greensock.com/docs/v3/GSAP/Tween/resume() reverse( from:*, suppressEvents:Boolean ): Reverses playback so that all aspects of the animation are oriented backwards including, for example, a tween’s ease. Quelle: https://greensock.com/docs/v3/GSAP/Tween/reverse() reverse( time:*, suppressEvents:Boolean ): Jumps to a specific time without affecting whether or not the instance is paused or reversed. Quelle: https://greensock.com/docs/v3/GSAP/Tween/seek() time( value:Number, suppressEvents:Boolean ): Gets or sets the local position of the playhead (essentially the current time), not including any repeats or repeatDelays. Quelle: https://greensock.com/docs/v3/GSAP/Tween/time() duration( value:Number ): Gets or sets the animation’s duration, not including any repeats or repeatDelays. Quelle: https://greensock.com/docs/v3/GSAP/Tween/duration() timeScale( value:Number ): Factor that’s used to scale time in the animation where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, -1 = go backwards at normal speed, etc. Quelle: https://greensock.com/docs/v3/GSAP/Tween/timeScale() kill( target:Object, propertiesList:String ): Kills the animation entirely or in part depending on the parameters. Simply calling kill() (without using any parameters // inputs) will immediately stop the animation, remove it from its parent timeline, wipe out any property tweens and release it for garbage collection. Quelle: https://greensock.com/docs/v3/GSAP/Tween/kill() 6.3 Synonyme Targets // Objects you want to animate inputs // parameters "]]
